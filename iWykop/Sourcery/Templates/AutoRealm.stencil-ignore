{% for type in types.structs|annotated:"RealmWrapper" %}
{% set objectForCoding %}{{ type.name|lowerFirstWord }}{% endset %}
// sourcery:file:Generated/{{ type.name }}+RealmWrapper

import Foundation
import RealmSwift
{% macro prepareVars variables %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}
    {% if not variable.annotations.skipPersistance %}
    dynamic var {{ variable.name }} : {{ variable.typeName |replace:"?","" }} = {{ variable.typeName|replace:"?","" }}();
    {% endif %}
    {% endfor %}
{% endmacro %}


{% macro assignFromManagedObject variables %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}
    
    {% if not variable.annotations.skipPersistance %}
     
     
      {% if not variable.isOptional %}
        self.{{ variable.name }} = managedObject.{{ variable.name }};
      {% else %}
        self.{{ variable.name }} = managedObject.{{ variable.name }};
      {% endif %}

     
    {% endif %}

    {% endfor %}
{% endmacro %}



{% macro assignToManagedObject variables %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}
    
    {% if not variable.annotations.skipPersistance %}
     
    managed.{{ variable.name }} = self.{{ variable.name }};
     
     
    {% endif %}

    {% endfor %}
{% endmacro %}


{% macro getPrimaryKey variables %}{% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}{% if variable.annotations.primaryKey %}"{{ variable.name }}"{% endif %}{% endfor %}{% endmacro %}


final class {{ type.name }}Object: Object {

    {% call prepareVars type.storedVariables %}

    override static func primaryKey() -> String? {
        return {% call getPrimaryKey type.storedVariables %}

    }
    
    override init() {
        
    }


}


extension {{ type.name }}: Persistable {


    typealias ManagedObject = {{ type.name }}Object

    public init(managedObject: {{ type.name }}Object) {
        {% call assignFromManagedObject type.storedVariables %}


    }
    public func managedObject() -> {{ type.name }}Object {
        let managed = {{ type.name }}Object()
        
        {% call assignToManagedObject type.storedVariables %}

        return managed
    }
}



// sourcery:end
{% endfor %}

